AGENDA:
=======
- if condition (contd...)
- real time script
- crontab
- introduction to VC


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



Note:
-------
 ALL possible conditions which can be used with "if conditions" 
	 a.conditions used for  matching / checking "strings" are :
	 
	 eg: string => alice = junjesh

         [ $STRING == STRING ] - Equal
         [ $STRING != STRING ] - Not Equal
	     [ -z $STRING ] - Empty string 
         [ -n $STRING ] - Not empty string	 
		       
	b. conditions used for "mathematicall operations" / Relational operators are : 
	     here NUM means number
         [ $NUM -eq NUM ] - Equal
         [ $NUM -ne NUM ] - Not equal
         [ $NUM -lt NUM ] - Less than
         [ $NUM -le NUM ] - Less than or equal
         [ $NUM -gt NUM ] - Greaterthan
         [ $NUM -ge NUM ] - Greater
    
	c. conditions used for checking file/directory/ link types are:
          [ -f $FILE ] - Exists        ==> to check file Exists are not
		  [ -d $DIRECTORY ] - Directory  ==> to check directory Exists are not
		  [ -h $FILE ] - Symlink/softlink    ==> to check link is softlik are not
		  
	   To check permissions of file: 
          [ -r $FILE ] - Readable  ==> to check file has read permissions are not
          [ -w $FILE ] - Writable  ==> to check file has write permissions are not

	
	
	d. based on commands exit status :
	      [ $0 -eq NUM ]   # conditions used, if previous commans return zero/ non zero exit code



examples on if conditions used for checking file/directory/ link types are:
--------------------------------------------------------------------------------
#check the file exists/ are not in the given name (as input from read command)

Note:
----

[ -f $FILENAME ] ==>  this condition block used to check FILE in mentioned name exists or not ?
  
[ -d $DIRECTORYNAME ] ==> condition block used to check directory in mentioned name exists or not

[ -h $FILENAME ] ==> this condition block used to check hardlink in mentioned name exists or not ?




script to check the file exists/ are not in the given name (as input from read command):
-------------------------------------------------------------------------------------


[ec2-user@ip-172-31-24-167 ~]$ cat if_check_for_fileName.sh
#!/bin/bash
echo " Enter input file name you need to check............"
read FILE_NAME
if [ -f $FILE_NAME ]
then
  echo " file name provided by you in read command is available in pwd & please find its details below....."
  ls -lrt | grep $FILE_NAME
else
  echo " file name provided in read command is unavailable/doesent exist....."
fi




Script to check the directory exists/ are not in the given name (as input from read command) :
----------------------------------------------------------------------------------------------

[ec2-user@ip-172-31-24-167 ~]$ cat if_check_for_directoryName.sh
#!/bin/bash
echo " Enter input directory name you need to check............"
read DIR_NAME
if [ -d $DIR_NAME ]
then
  echo " Directory name provided by you in read command is available & please find its details below....."
  ls -lrt | grep $DIR_NAME
else
  echo " Directory name provided in read command is unavailable/doesent exist....."
fi





Realtime script:
----------------


Note:
-----
in server hardware resources will be monitored (hardwares==> RAM, HDD, CPU)

for optimal performance of your application :
disk utilization ==> should be below 70%-80% 
Ram ==> should be below 60%





Step1: extract the value of disk usage value (in numbers) using below series of command


[ec2-user@ip-172-31-11-142 ~]$
[ec2-user@ip-172-31-11-142 ~]$ df -kh
Filesystem      Size  Used Avail Use% Mounted on
devtmpfs        474M     0  474M   0% /dev
tmpfs           483M     0  483M   0% /dev/shm
tmpfs           483M  408K  482M   1% /run
tmpfs           483M     0  483M   0% /sys/fs/cgroup
/dev/xvda1      8.0G  1.6G  6.4G  20% /
tmpfs            97M     0   97M   0% /run/user/1000
[ec2-user@ip-172-31-11-142 ~]$
[ec2-user@ip-172-31-11-142 ~]$
[ec2-user@ip-172-31-11-142 ~]$
[ec2-user@ip-172-31-11-142 ~]$ df -kh | tail -2 | head -1
/dev/xvda1      8.0G  1.6G  6.4G  20% /
[ec2-user@ip-172-31-11-142 ~]$
[ec2-user@ip-172-31-11-142 ~]$
[ec2-user@ip-172-31-11-142 ~]$ df -kh | tail -2 | head -1 | awk -F " " '{print$5}'
20%
[ec2-user@ip-172-31-11-142 ~]$
[ec2-user@ip-172-31-11-142 ~]$
[ec2-user@ip-172-31-11-142 ~]$ df -kh | tail -2 | head -1 | awk -F " " '{print$5}' | sed 's/%//g'
20
[ec2-user@ip-172-31-11-142 ~]$
[ec2-user@ip-172-31-11-142 ~]$


assign the extracted value (20) to a varaible DISK_USAGE as shown below



[ec2-user@ip-172-31-11-142 ~]$
[ec2-user@ip-172-31-11-142 ~]$ DISK_USAGE=`df -kh | tail -2 | head -1 | awk -F " " '{print$5}' | sed 's/%//g'`
[ec2-user@ip-172-31-11-142 ~]$
[ec2-user@ip-172-31-11-142 ~]$
[ec2-user@ip-172-31-11-142 ~]$ echo $DISK_USAGE
20
[ec2-user@ip-172-31-11-142 ~]$



step3: using above varaible write a script which will check if disk usage is more than 70%, to do some cleanup activity


vi disk_check_script.sh
------------------------
#!/bin/bash
DISK_USAGE=`df -kh | tail -2 | head -1 | awk -F " " '{print$5}' | sed 's/%//g'`
if [ $DISK_USAGE -gt 70 ]
then
  echo " take action & delete some files ....."
  sudo rm -f /tmp/*
  sudo rm -rf /opt/logs/*
  #mail -s "disk utilasation has gone beyond 70%" shahsi@xyz.com teamlead@xyz.com
else
  echo "since disk usage is less than 70 , we are good...."
fi



Note:
-----
How do you run script in background?
-------------------------------------
add & (ampercend) at the end of script while executing

syntax: sh <myscript>.sh &




+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




crontab: 
--------
is a scheduler to schedule  your scripts & commands for execution.

syntax:     m     h   dom    mon   dow  sh  <absolute_path_to_myscript>  

where:
m    ==> Minutes.    
         #The allowed values reange : 0 to 59.
			
h    ==> Hours.        
         #The allowed values range: 0 to 23 
			 
dom  ==> Day of Month.   
         #Allowed values range: 1 to 31
			 
mon  ==> Month of Year.   
         #Allowed values range is: 1 to 12 
         #Even we can use terms like JAN,FEB,MAR etc 
			  
dow  ==> Day of week.    
         #The allowed values range is: 0 to 6 
         #Even we can use terms like SUN(0),MON(1),TUE(2)  WED (3) THU(4) FRI(5) SAT(6)


cron commands
-------------------
crontab -l   :     To list out cron jobs which are already configured.
crontab -e  :    To edit  crontab & schedule scripts .


Common crontab Examples:
-----------------------
				 
- Run script AUG 15th 12 o clock
	   00    12  15  AUG   MON  sh /home/ec2-user/dis_space_check.sh 

- Run script Everday 12 o clock 
       00 12 * * *  sh /home/ec2-user/dis_space_check.sh

- Run script only on Monday & thursday everyminute
       *  * * DEC MON,THU sh /home/ec2-user/dis_space_check.sh


# Configure cron job which writes hello from cron message to cron_output_log  for every minute. 
$ crontab -e
* * * * * echo "Hello from cron" >> /home/ec2-user/cron_output_log2



Various Possibilities of specifying Date and Time USING CRONTAB:
---------------------------------------------------------------
 # m h dom mon dow command 
 - Every minute   ==> * * * * * 

- Every 2 minutes ==>  */2 * * * * 
       note: */2 means every 2nd minute 

-  Every 3 minutes  ==> */3 * * * *

- Every 1 hour  ==>  0 * * * * 

- Every 2 hours   ==> 0 */2 * * * 

- Execute only at 6'o clock,14'o clock and 22o clock
   0 6,14,22 * * * 

- Every Night at midnight   ==> 0 0 * * *

- Every Sunday only once  ==>  0 0 * * SUN 0 0 * * 0

- Only on week days  ==> 0 0 * * 1-5

- Only on week-ends   ==> 0 0 * * 6,0 

- Every month on 1st  ==>  0 0 1 * * 

- Every Year Jan 1st   ==> 0 0 1 1 *





+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



source code managemnt?
---------------------

code: developers write programm file / this programm can be called as code

source code: code written to develop an application / operating system

management ==> edit delete mofify the source code....




SCM (Source Code Management) Tools:
-----------------------------------
SCM tools help a software team to manage changes to source code over time.


code: is another name of a programm
source code:  programm files whic was written to develop an application.
For almost all software projects, the source code is like the crown jewels - a precious asset whose value must be protected. 
manage code ==> edit code, delete code, modify code & maintain code

source code management tools is also called as Version control systems 


Note:
-----
- code: is just a another name of a programm
  source code:  programm files whic was written to develop an application.
               For almost all software projects, the source code is like the crown jewels - a precious asset whose value must be protected. 
  manage code: edit code, delete code, modify code & maintain code


- java developer --> java code/programm ==>    .java
  python developer --> python code/programm ==>    .py

- SCM's are like banks
  Banks ==handle==> Money
  SCM   ==handle==> Code 





+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


